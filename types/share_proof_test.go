package types

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tendermint/tendermint/proto/tendermint/types"
)

func TestShareProofValidate(t *testing.T) {
	type testCase struct {
		name    string
		sp      ShareProof
		root    []byte
		wantErr bool
	}

	testCases := []testCase{
		{
			name:    "empty share proof returns error",
			sp:      ShareProof{},
			root:    root,
			wantErr: true,
		},
		{
			name:    "valid share proof returns no error",
			sp:      validShareProof(),
			root:    root,
			wantErr: false,
		},
		{
			name:    "share proof with mismatched number of share proofs returns error",
			sp:      mismatchedShareProofs(),
			root:    root,
			wantErr: true,
		},
		{
			name:    "share proof with mismatched number of shares returns error",
			sp:      mismatchedShares(),
			root:    root,
			wantErr: true,
		},
		{
			name:    "valid share proof with incorrect root returns error",
			sp:      validShareProof(),
			root:    incorrectRoot,
			wantErr: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := tc.sp.Validate(tc.root)
			if tc.wantErr {
				assert.Error(t, got)
				return
			}
			assert.NoError(t, got)
		})
	}
}

func mismatchedShareProofs() ShareProof {
	sp := validShareProof()
	sp.ShareProofs = []*types.NMTProof{}
	return sp
}

func mismatchedShares() ShareProof {
	sp := validShareProof()
	sp.Data = [][]byte{}
	return sp
}

// validShareProof returns a valid ShareProof for a single share. This test data
// was copied from celestia-app's pkg/proof/proof_test.go
// TestNewShareInclusionProof: "1 transaction share"
func validShareProof() ShareProof {
	return ShareProof{
		Data: [][]uint8{{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x62, 0xc, 0x0, 0x0, 0x0, 0x11, 0xf4, 0x3, 0x52, 0xfd, 0xfc, 0x7, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0xf, 0x9a, 0x62, 0x1d, 0x72, 0x95, 0x66, 0xc7, 0x4d, 0x10, 0x3, 0x7c, 0x4d, 0x7b, 0xbb, 0x4, 0x7, 0xd1, 0xe2, 0xc6, 0x49, 0x81, 0x85, 0x5a, 0xd8, 0x68, 0x1d, 0xd, 0x86, 0xd1, 0xe9, 0x1e, 0x0, 0x16, 0x79, 0x39, 0xcb, 0x66, 0x94, 0xd2, 0xc4, 0x22, 0xac, 0xd2, 0x8, 0xa0, 0x7, 0x29, 0x39, 0x48, 0x7f, 0x69, 0x99, 0xeb, 0x9d, 0x18, 0xa4, 0x47, 0x84, 0x4, 0x5d, 0x87, 0xf3, 0xc6, 0x7c, 0xf2, 0x27, 0x46, 0xe9, 0x95, 0xaf, 0x5a, 0x25, 0x36, 0x79, 0x51, 0xba, 0xa2, 0xff, 0x6c, 0xd4, 0x71, 0xc4, 0x83, 0xf1, 0x5f, 0xb9, 0xb, 0xad, 0xb3, 0x7c, 0x58, 0x21, 0xb6, 0xd9, 0x55, 0x26, 0xa4, 0x1a, 0x95, 0x4, 0x68, 0xb, 0x4e, 0x7c, 0x8b, 0x76, 0x3a, 0x1b, 0x1d, 0x49, 0xd4, 0x95, 0x5c, 0x84, 0x86, 0x21, 0x63, 0x25, 0x25, 0x3f, 0xec, 0x73, 0x8d, 0xd7, 0xa9, 0xe2, 0x8b, 0xf9, 0x21, 0x11, 0x9c, 0x16, 0xf, 0x7, 0x2, 0x44, 0x86, 0x15, 0xbb, 0xda, 0x8, 0x31, 0x3f, 0x6a, 0x8e, 0xb6, 0x68, 0xd2, 0xb, 0xf5, 0x5, 0x98, 0x75, 0x92, 0x1e, 0x66, 0x8a, 0x5b, 0xdf, 0x2c, 0x7f, 0xc4, 0x84, 0x45, 0x92, 0xd2, 0x57, 0x2b, 0xcd, 0x6, 0x68, 0xd2, 0xd6, 0xc5, 0x2f, 0x50, 0x54, 0xe2, 0xd0, 0x83, 0x6b, 0xf8, 0x4c, 0x71, 0x74, 0xcb, 0x74, 0x76, 0x36, 0x4c, 0xc3, 0xdb, 0xd9, 0x68, 0xb0, 0xf7, 0x17, 0x2e, 0xd8, 0x57, 0x94, 0xbb, 0x35, 0x8b, 0xc, 0x3b, 0x52, 0x5d, 0xa1, 0x78, 0x6f, 0x9f, 0xff, 0x9, 0x42, 0x79, 0xdb, 0x19, 0x44, 0xeb, 0xd7, 0xa1, 0x9d, 0xf, 0x7b, 0xba, 0xcb, 0xe0, 0x25, 0x5a, 0xa5, 0xb7, 0xd4, 0x4b, 0xec, 0x40, 0xf8, 0x4c, 0x89, 0x2b, 0x9b, 0xff, 0xd4, 0x36, 0x29, 0xb0, 0x22, 0x3b, 0xee, 0xa5, 0xf4, 0xf7, 0x43, 0x91, 0xf4, 0x45, 0xd1, 0x5a, 0xfd, 0x42, 0x94, 0x4, 0x3, 0x74, 0xf6, 0x92, 0x4b, 0x98, 0xcb, 0xf8, 0x71, 0x3f, 0x8d, 0x96, 0x2d, 0x7c, 0x8d, 0x1, 0x91, 0x92, 0xc2, 0x42, 0x24, 0xe2, 0xca, 0xfc, 0xca, 0xe3, 0xa6, 0x1f, 0xb5, 0x86, 0xb1, 0x43, 0x23, 0xa6, 0xbc, 0x8f, 0x9e, 0x7d, 0xf1, 0xd9, 0x29, 0x33, 0x3f, 0xf9, 0x93, 0x93, 0x3b, 0xea, 0x6f, 0x5b, 0x3a, 0xf6, 0xde, 0x3, 0x74, 0x36, 0x6c, 0x47, 0x19, 0xe4, 0x3a, 0x1b, 0x6, 0x7d, 0x89, 0xbc, 0x7f, 0x1, 0xf1, 0xf5, 0x73, 0x98, 0x16, 0x59, 0xa4, 0x4f, 0xf1, 0x7a, 0x4c, 0x72, 0x15, 0xa3, 0xb5, 0x39, 0xeb, 0x1e, 0x58, 0x49, 0xc6, 0x7, 0x7d, 0xbb, 0x57, 0x22, 0xf5, 0x71, 0x7a, 0x28, 0x9a, 0x26, 0x6f, 0x97, 0x64, 0x79, 0x81, 0x99, 0x8e, 0xbe, 0xa8, 0x9c, 0xb, 0x4b, 0x37, 0x39, 0x70, 0x11, 0x5e, 0x82, 0xed, 0x6f, 0x41, 0x25, 0xc8, 0xfa, 0x73, 0x11, 0xe4, 0xd7, 0xde, 0xfa, 0x92, 0x2d, 0xaa, 0xe7, 0x78, 0x66, 0x67, 0xf7, 0xe9, 0x36, 0xcd, 0x4f, 0x24, 0xab, 0xf7, 0xdf, 0x86, 0x6b, 0xaa, 0x56, 0x3, 0x83, 0x67, 0xad, 0x61, 0x45, 0xde, 0x1e, 0xe8, 0xf4, 0xa8, 0xb0, 0x99, 0x3e, 0xbd, 0xf8, 0x88, 0x3a, 0xa, 0xd8, 0xbe, 0x9c, 0x39, 0x78, 0xb0, 0x48, 0x83, 0xe5, 0x6a, 0x15, 0x6a, 0x8d, 0xe5, 0x63, 0xaf, 0xa4, 0x67, 0xd4, 0x9d, 0xec, 0x6a, 0x40, 0xe9, 0xa1, 0xd0, 0x7, 0xf0, 0x33, 0xc2, 0x82, 0x30, 0x61, 0xbd, 0xd0, 0xea, 0xa5, 0x9f, 0x8e, 0x4d, 0xa6, 0x43, 0x1, 0x5, 0x22, 0xd, 0xb, 0x29, 0x68, 0x8b}},
		ShareProofs: []*types.NMTProof{
			{
				Start: 0,
				End:   1,
				Nodes: [][]uint8{
					{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x50, 0x4a, 0x5a, 0x3e, 0x6c, 0x8c, 0xe3, 0x46, 0x3b, 0x9a, 0xbd, 0x0, 0x59, 0x6f, 0xc0, 0x60, 0xab, 0xac, 0xda, 0x43, 0x87, 0x2, 0xb7, 0x43, 0x53, 0x4d, 0x28, 0xba, 0x1c, 0x1e, 0xb3, 0x49},
					{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xea, 0x8b, 0x34, 0x4c, 0xf1, 0xfd, 0x67, 0x46, 0x5a, 0x96, 0x14, 0xf8, 0x48, 0x6c, 0x6d, 0x11, 0x63, 0xea, 0xd6, 0x10, 0x5f, 0xd7, 0x27, 0x6a, 0xb7, 0xcf, 0xe9, 0x22, 0x72, 0x9f, 0xc5, 0x13},
					{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xb6, 0x1f, 0xa2, 0xad, 0xff, 0xf, 0x11, 0x9e, 0x1, 0x46, 0xf9, 0x3e, 0x3c, 0x9c, 0x25, 0xf5, 0x95, 0xc, 0x6, 0x54, 0x94, 0x7b, 0x15, 0xe5, 0x9f, 0xbc, 0xb6, 0x3c, 0xb9, 0x4d, 0xf2, 0xf1},
					{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xdc, 0xb9, 0xea, 0x54, 0x40, 0x9e, 0x7b, 0x9a, 0x1f, 0xbd, 0xf6, 0x3a, 0x5d, 0x69, 0xd2, 0x31, 0xc0, 0x5e, 0xdd, 0x7e, 0x1b, 0x55, 0x11, 0xd, 0x27, 0xeb, 0xc0, 0x9e, 0xc5, 0x9e, 0x84, 0x87},
					{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x61, 0x1b, 0x3c, 0xe, 0xfb, 0xcf, 0x92, 0x1a, 0x10, 0x7d, 0x19, 0x1b, 0x2d, 0x47, 0xba, 0x44, 0x61, 0xa4, 0xae, 0xdf, 0x8d, 0x67, 0xa7, 0x1e, 0x71, 0x35, 0x75, 0x1d, 0xe4, 0x9c, 0xbf, 0x99},
					{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x22, 0x27, 0xe3, 0x85, 0xaf, 0xef, 0x48, 0x29, 0xc6, 0xdc, 0x10, 0xe6, 0x18, 0x7, 0x57, 0xfc, 0xa5, 0x68, 0xf6, 0x63, 0x72, 0x26, 0xff, 0xc3, 0x51, 0x7e, 0x7e, 0x9b, 0x5e, 0xd0, 0xab, 0x69},
				},
				LeafHash: []uint8(nil),
			},
		},
		NamespaceID: []uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
		RowProof:    validRowProof(),
	}
}
